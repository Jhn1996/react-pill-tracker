{"version":3,"sources":["components/Button.js","components/Header.js","components/Item.js","components/Items.js","components/AddItem.js","components/Clock.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","style","backgroundColor","className","defaultProp","Header","title","onAdd","showAdd","defaultProps","Item","item","onDelete","onToggle","reminder","onDoubleClick","id","cursor","dose","timenumber","instance","format","remindertime","Items","items","map","index","AddItem","useState","setText","pillnumber","setPillnumber","setTimenumber","setDose","setInstance","Date","currenttime","setCurrenttime","setHours","setRemindertime","setReminder","inputElement","useRef","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","parseInt","ref","checked","currentTarget","Clock","props","date","setDate","useEffect","timerID","setInterval","clearInterval","toLocaleTimeString","App","showAddItem","setShowAddItem","setItems","a","fetchItems","itemsFromServer","getItems","fetch","res","json","data","fetchItem","addItem","method","headers","body","JSON","stringify","deleteItem","filter","toggleReminder","itemToToggle","updItem","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8a5d984.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\n\nconst Button = ({ color, text, onClick }) => {\n    return (\n            <button \n            onClick={onClick} \n            style={{ backgroundColor: color }}\n            className='btn'\n            >\n            {text}\n            </button>\n    )\n}\n\nButton.defaultProp = {\n    color: 'steelblue'\n}\n\nButton.propTypes = {\n    text: PropTypes.string,\n    color: PropTypes.string,\n    onClick: PropTypes.func,\n}\n\nexport default Button\n","import Button from './Button'\nimport PropTypes from 'prop-types'\n\nconst Header = ({ title,onAdd,showAdd }) => {\n    return (\n        <header className='header'>\n          <h1>{title}</h1>\n          <Button color={showAdd ? 'black': 'blue'} text={showAdd ? 'Close': 'Add Pill'} onClick={onAdd} />\n        </header>\n    )\n}\n\nHeader.defaultProps = {\n    title: 'Pill Tracker',\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n}\n\n// todo: add current date timer\n\nexport default Header\n","import {FaTimes} from 'react-icons/fa'\nimport Moment from 'react-moment'\n\nconst Item = ({item, onDelete, onToggle}) => {\n    return (\n        <div className={`item ${item.reminder ?'reminder': ''}`} onDoubleClick={()=>\n        onToggle(item.id)}>\n            <h3>{item.text} <FaTimes \n            style={{color:'red', cursor:'pointer'}} \n            onClick={() => onDelete(item.id)}/></h3>\n            <p>Take {item.dose} pills every {item.timenumber} hrs for a totall {item.instance} times.</p>\n            <p>Next pill at <Moment format='LLLL'>{item.remindertime}</Moment></p>\n        </div>\n    )\n}\n\nexport default Item","import Item from './Item'\n\nconst Items = ({items,onDelete, onToggle }) => {\n    return (\n        <>\n          {items.map((item,index)=>(\n              <Item key={index}\n              item={item}\n              onDelete={onDelete}\n              onToggle={onToggle} />\n          ))}  \n        </>\n    )\n}\n\nexport default Items\n\n","import {useState, useRef} from 'react'\n\nconst AddItem = ({onAdd}) => {\n    const [text,setText] = useState('')\n    const [pillnumber,setPillnumber] = useState('')\n    const [timenumber,setTimenumber] = useState('')\n    const [dose,setDose] = useState('')\n    const [instance,setInstance] = useState(pillnumber/dose)\n    const [currenttime,setCurrenttime] = useState(new Date())\n    const [remindertime, setRemindertime] = useState(currenttime.setHours(timenumber))\n    const [reminder,setReminder] = useState(false)\n    const inputElement = useRef('')\n\n    const onSubmit = (e) => {e.preventDefault()\n    if (!text){\n        alert('Please add a pill')\n        return\n    }\n    onAdd({text, pillnumber, timenumber, dose, instance,reminder,currenttime, remindertime})\n\n    setText('')\n    setTimenumber('')\n    setPillnumber('')\n    setDose('')\n    setCurrenttime(new Date())\n    setInstance(pillnumber/dose)\n    setReminder(false)\n    setRemindertime(currenttime.setHours(timenumber))\n    // console.log(setInstance)\n}\n    return (\n        <form className='add-form' onSubmit={onSubmit}>\n            <div className='form-control'>\n                <label>Pill Name</label>\n                <input type = 'text'\n                placeholder= 'i.e. Tylenol'\n                value={text}\n                onChange={(e) => setText(e.target.value)}/>\n            </div>\n            <div className='form-control'>\n                <label>Total amount of pills</label>\n                <input type = 'number'\n                placeholder= 'i.e.30 pills'\n                value={pillnumber}\n                onChange={(e) => setPillnumber(e.target.value)}/><span>per prescription</span>\n            </div>\n            <div className='form-control'>\n                <label>Time interval (in hrs)</label>\n                <input type = 'number'\n                placeholder= 'i.e. 6'\n                value={parseInt(timenumber)}\n                onChange={(e) => setTimenumber(e.target.value)}/><span>hours</span>\n            </div>\n            <div className='form-control'>\n                <label>Dosage (in pills)</label>\n                <input type = 'number'\n                placeholder= 'i.e. 2'\n                ref = {inputElement}\n                value={dose}\n                onChange={(e) => setDose(e.target.value)}/><span>pills</span>\n            </div>\n            <div className='form-control form-control-check'>\n                <label>Set Reminder</label>\n                <input type = 'checkbox'\n                checked = {reminder}\n                value={reminder}\n                onChange={(e) => setReminder(e.currentTarget.checked)}/>\n            </div>\n            <input type='submit' value='Save Pill' className='btn btn-block' \n            onClick={(e) => {\n            setInstance(pillnumber/dose); \n            setCurrenttime(new Date())\n            setRemindertime(currenttime.setHours(timenumber))\n            }}/>\n        </form>\n    )\n}\n\nexport default AddItem\n","\nimport { useState, useEffect } from 'react';\n// import Moment from 'react-moment';\nfunction Clock(props) {\n  const [date, setDate] = useState(new Date());\n\n useEffect(() => {\n  var timerID = setInterval( () => tick(), 1000 );\n\n  return function cleanup() {\n      clearInterval(timerID);\n    };\n });\n\n   function tick() {\n    setDate(new Date());\n   }\n\n   return (\n      <div>\n        <h3>{date.toLocaleTimeString()}</h3>\n      </div>\n    )\n}\n\nexport default Clock","import { useState, useEffect } from 'react'\nimport Header from './components/Header'\nimport Items from './components/Items'\nimport AddItem from './components/AddItem'\nimport Clock from './components/Clock'\n\n//time\nfunction App() {\n  const [showAddItem, setShowAddItem] = useState(false)\n  const [items, setItems] = useState([])\n\n  useEffect(()=>{\n    const getItems = async () => {\n      const itemsFromServer = await fetchItems()\n      setItems(itemsFromServer)\n    }\n    getItems()\n  },[])\n\n//fetch items\nconst fetchItems = async () => {\n  const res = await fetch('http://localhost:5000/items')\n  const data = await res.json()\n  return data\n}\n//fetch item\nconst fetchItem = async (id) => {\n  const res = await fetch(`http://localhost:5000/items/${id}`)\n  const data = await res.json()\n  return data\n}\n//Add item\nconst addItem = async(item)=> {\n  const res = await fetch('http://localhost:5000/items',{\n    method: 'POST',\n    headers: {\n      'Content-type':'application/json'\n    },\n    body: JSON.stringify(item)\n  })\n\n  const data = await res.json()\n\n  setItems([...items, data])\n  // const id = Math.floor(Math.random() * 10000)+1\n  // const newItem = {id, ...item}\n  // setItems([...items, newItem])\n  // console.log(item)\n}\n\n//delete item\n\nconst deleteItem = async(id) => {\n  await fetch(`http://localhost:5000/items/${id}`,{\n    method:'DELETE'\n  })\n  setItems(items.filter((item) => item.id !== id))\n}\n\n//toggle reminder\nconst toggleReminder = async(id)=> {\n  const itemToToggle = await fetchItem(id)\n  const updItem = {...itemToToggle, reminder: !itemToToggle.reminder}\n  const res = await fetch(`http://localhost:5000/items/${id}`, {\n    method:'PUT',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(updItem)\n  })\n\n  const data = await res.json()\n  setItems(\n    items.map((item) => \n    item.id === id\n    ?{...item, reminder: data.reminder}: item\n    )\n  )\n}\n  return (\n    <div className=\"container\">\n      <Clock/>\n      <Header onAdd={()=> setShowAddItem\n        (!showAddItem)} showAdd={showAddItem}/>\n      {showAddItem && <AddItem  onAdd={addItem}/>}\n      {items.length > 0 ?<Items items={items} onDelete={deleteItem} onToggle={toggleReminder}/>:'No Pills to take'}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}